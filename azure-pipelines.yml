# Each time the pipeline is run, name the build with the following convention
name: $(Build.BuildId)

# Triggers Pipeline only on Master
trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - LICENSE

# Disables triggering Pipeline run at creation of every Pull Request
pr: none

# Global variables for the pipeline
variables:
  terraformVersion: 1.0.5
  dataHubHelmChartVersion: 0.2.53

pool:
  vmImage: ubuntu-latest

stages:
  # Continuous Integration steps
  - stage: CI
    displayName: "Continuous Integration"

    # Build jobs
    jobs:
      - job: Build

        steps:
          # Upload Kubernetes manifests to current artifact Pipeline from folder /k8s
          - publish: $(System.DefaultWorkingDirectory)/k8s
            artifact: manifests
            displayName: "Publish Artifact: manifests"

          # Upload Terraform plan to current artifact Pipeline from folder /terraform
          - publish: $(System.DefaultWorkingDirectory)/terraform
            artifact: terraform
            displayName: "Publish Artifact: terraform"

          # Upload DataHub Helm Chart Values Files to current artifact Pipeline from folder /datahub
          - publish: $(System.DefaultWorkingDirectory)/datahub
            artifact: datahub
            displayName: "Publish Artifact: datahub"

  # Continuous Deployment steps
  - stage: CDD
    displayName: "Continuous Deployment"
    dependsOn: CI
    # Run CD only if CI succeeds
    condition: succeeded()

    variables:
    - group: "datahub-dev"
    - group: "K8s-dev"
    - group: "kafka-dev"
    - group: "saml2aws-dev"

    jobs:
      - deployment: K8s
        displayName: "Deploy to Kubernetes"
        variables:
          AWS_PROFILE: "saml"
        environment: "datahub-dev"        
        strategy:
          runOnce:
            deploy:
              steps:
                # Setup auth against k8s
                - bash: |
                    VERSION=1.14.6
                    BUILD_DATE=2019-08-22
                    DOWNLOAD_URL=https://amazon-eks.s3-us-west-2.amazonaws.com/${VERSION}/${BUILD_DATE}/bin/linux/amd64/aws-iam-authenticator
                    LOCAL_FILE=./aws-iam-authenticator
                    curl -Lo $LOCAL_FILE $DOWNLOAD_URL
                    chmod +x $LOCAL_FILE
                    sudo mv $LOCAL_FILE /usr/local/bin

                    # Install saml2aws
                    VERSION=2.20.0
                    DOWNLOAD_URL=https://github.com/Versent/saml2aws/releases/download/v${VERSION}/saml2aws_${VERSION}_linux_amd64.tar.gz
                    LOCAL_FILE=./saml2aws.tar.gz
                    curl -Lo $LOCAL_FILE $DOWNLOAD_URL
                    tar xvzf $LOCAL_FILE
                    rm $LOCAL_FILE
                    sudo mv saml2aws /usr/local/bin

                    # Configure saml2aws
                    saml2aws configure --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto --session-duration=28800 --skip-prompt

                    saml2aws login --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto --skip-prompt --force --disable-keychain
                    eval $(saml2aws script --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto)
                  env:
                    SAML2AWS_PASSWORD: $(SAML2AWS_PASSWORD)
                    SAML2AWS_USERNAME: $(SAML2AWS_USERNAME)
                    SAML2AWS_ROLE: $(SAML2AWS_ROLE)

                # Terragrunt

                # Install terraform
                - task: TerraformInstaller@0
                  inputs:
                    terraformVersion: $(terraformVersion)

                # Install Terragrunt
                - task: Bash@3
                  inputs:
                    targetType: "inline"
                    script: "brew install terragrunt"

                # Download Terraform folder from current artifacts pipeline
                - download: current
                  artifact: terraform
                  displayName: "Download Artifact: terraform"

                # Apply and output Terragrunt
                - task: AWSShellScript@1
                  displayName: Apply and output Terragrunt
                  inputs:
                    awsCredentials: "dataplatform-aws-deploy"
                    regionName: "eu-central-1"
                    scriptType: "inline"
                    inlineScript: |
                      terragrunt apply -auto-approve
                      terragrunt output -json > output.json
                    disableAutoCwd: true
                    workingDirectory: "$(Pipeline.Workspace)/terraform/terragrunt/dev"

                # Terraform output to variables
                - task: OneLuckiDev.json2variable.vsts-json-to-variable.oneLuckiDevJson2Variable@1
                  inputs:
                    jsonFile: "$(Pipeline.Workspace)/terraform/terragrunt/dev/output.json"

                # Download manifest from current artifacts pipeline
                - download: current
                  artifact: manifests
                  displayName: "Download Artifact: manifests"

                # Replace token values in yaml files with pipeline variables
                - task: qetza.replacetokens.replacetokens-task.replacetokens@3
                  displayName: "Replace tokens in yaml files"
                  inputs:
                    rootDirectory: "$(Pipeline.Workspace)/manifests/"
                    targetFiles: "*.yaml"
                    tokenPrefix: "$("
                    tokenSuffix: ")"
                    actionOnMissing: "fail"

                # Apply Kubernetes manifests
                - task: Kubernetes@1
                  displayName: "Apply manifests"
                  inputs:
                    connectionType: Kubernetes Service Connection
                    kubernetesServiceEndpoint: "$(K8S_SERVICECONNECTION)"
                    namespace: $(K8S_NAMESPACE)
                    command: apply
                    arguments: "-f $(Pipeline.Workspace)/manifests/"

                # DataHub
                # Install the Helm binary to the host machine
                - task: HelmInstaller@1
                  displayName: "Helm client installer"
                  inputs:
                    helmVersionToInstall: 3.2.4

                # Download DataHub folder from current artifacts pipeline
                - download: current
                  artifact: datahub
                  displayName: "Download Artifact: datahub"

                # Replace token values in yaml files with pipeline variables
                - task: qetza.replacetokens.replacetokens-task.replacetokens@3
                  displayName: "Replace tokens in yaml files"
                  inputs:
                    rootDirectory: "$(Pipeline.Workspace)/datahub/"
                    targetFiles: "*.yaml"
                    tokenPrefix: "$("
                    tokenSuffix: ")"
                    actionOnMissing: "fail"

                # Add DataHub Helm Chart Repository
                - task: HelmDeploy@0
                  inputs:
                    connectionType: "Kubernetes Service Connection"
                    kubernetesServiceConnection: $(K8S_SERVICECONNECTION)
                    namespace: $(K8S_NAMESPACE)
                    command: "repo"
                    arguments: "add datahub https://helm.datahubproject.io/"

                # Upgrade DataHub Helm Chart installation with DFDS Helm Chart Values File
                - task: HelmDeploy@0
                  inputs:
                    connectionType: "Kubernetes Service Connection"
                    kubernetesServiceConnection: $(K8S_SERVICECONNECTION)
                    namespace: $(K8S_NAMESPACE)
                    command: "upgrade"
                    chartType: "Name"
                    chartName: "datahub/datahub"
                    chartVersion: "$(dataHubHelmChartVersion)"
                    releaseName: "dfds-datahub"
                    install: false
                    arguments:
                      "-i -f $(Pipeline.Workspace)/datahub/values.yaml -f
                      $(Pipeline.Workspace)/datahub/dfdsvals.yaml"
                    waitForExecution: false

  # Continuous Deployment steps
  - stage: CD
    displayName: "Continuous Deployment"
    dependsOn: CDD
    # Run CD only if CI succeeds
    condition: succeeded()

    variables:
    - group: "datahub"
    - group: "K8s"
    - group: "kafka"
    - group: "saml2aws"

    jobs:
      - deployment: K8s
        displayName: "Deploy to Kubernetes"
        variables:
          AWS_PROFILE: "saml"
        environment: "datahub-prod"

        strategy:
          runOnce:
            deploy:
              steps:
                # Setup auth against k8s
                - bash: |
                    VERSION=1.14.6
                    BUILD_DATE=2019-08-22
                    DOWNLOAD_URL=https://amazon-eks.s3-us-west-2.amazonaws.com/${VERSION}/${BUILD_DATE}/bin/linux/amd64/aws-iam-authenticator
                    LOCAL_FILE=./aws-iam-authenticator
                    curl -Lo $LOCAL_FILE $DOWNLOAD_URL
                    chmod +x $LOCAL_FILE
                    sudo mv $LOCAL_FILE /usr/local/bin

                    # Install saml2aws
                    VERSION=2.20.0
                    DOWNLOAD_URL=https://github.com/Versent/saml2aws/releases/download/v${VERSION}/saml2aws_${VERSION}_linux_amd64.tar.gz
                    LOCAL_FILE=./saml2aws.tar.gz
                    curl -Lo $LOCAL_FILE $DOWNLOAD_URL
                    tar xvzf $LOCAL_FILE
                    rm $LOCAL_FILE
                    sudo mv saml2aws /usr/local/bin

                    # Configure saml2aws
                    saml2aws configure --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto --session-duration=28800 --skip-prompt

                    saml2aws login --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto --skip-prompt --force --disable-keychain
                    eval $(saml2aws script --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto)
                  env:
                    SAML2AWS_PASSWORD: $(SAML2AWS_PASSWORD)
                    SAML2AWS_USERNAME: $(SAML2AWS_USERNAME)
                    SAML2AWS_ROLE: $(SAML2AWS_ROLE)

                # Terragrunt

                # Install terraform
                - task: TerraformInstaller@0
                  inputs:
                    terraformVersion: $(terraformVersion)

                # Install Terragrunt
                - task: Bash@3
                  inputs:
                    targetType: "inline"
                    script: "brew install terragrunt"

                # Download Terraform folder from current artifacts pipeline
                - download: current
                  artifact: terraform
                  displayName: "Download Artifact: terraform"

                # Apply and output Terragrunt
                - task: AWSShellScript@1
                  displayName: Apply and output Terragrunt
                  inputs:
                    awsCredentials: "datadelivery-aws-deploy"
                    regionName: "eu-central-1"
                    scriptType: "inline"
                    inlineScript: |
                      terragrunt apply -auto-approve
                      terragrunt output -json > output.json
                    disableAutoCwd: true
                    workingDirectory: "$(Pipeline.Workspace)/terraform/terragrunt/prod"

                # Terraform output to variables
                - task: OneLuckiDev.json2variable.vsts-json-to-variable.oneLuckiDevJson2Variable@1
                  inputs:
                    jsonFile: "$(Pipeline.Workspace)/terraform/terragrunt/prod/output.json"

                # Download manifest from current artifacts pipeline
                - download: current
                  artifact: manifests
                  displayName: "Download Artifact: manifests"

                # Replace token values in yaml files with pipeline variables
                - task: qetza.replacetokens.replacetokens-task.replacetokens@3
                  displayName: "Replace tokens in yaml files"
                  inputs:
                    rootDirectory: "$(Pipeline.Workspace)/manifests/"
                    targetFiles: "*.yaml"
                    tokenPrefix: "$("
                    tokenSuffix: ")"
                    actionOnMissing: "fail"

                # Apply Kubernetes manifests
                - task: Kubernetes@1
                  displayName: "Apply manifests"
                  inputs:
                    connectionType: Kubernetes Service Connection
                    kubernetesServiceEndpoint: "$(K8S_SERVICECONNECTION)"
                    namespace: $(K8S_NAMESPACE)
                    command: apply
                    arguments: "-f $(Pipeline.Workspace)/manifests/"

                # DataHub
                # Install the Helm binary to the host machine
                - task: HelmInstaller@1
                  displayName: "Helm client installer"
                  inputs:
                    helmVersionToInstall: 3.2.4

                # Download DataHub folder from current artifacts pipeline
                - download: current
                  artifact: datahub
                  displayName: "Download Artifact: datahub"

                # Replace token values in yaml files with pipeline variables
                - task: qetza.replacetokens.replacetokens-task.replacetokens@3
                  displayName: "Replace tokens in yaml files"
                  inputs:
                    rootDirectory: "$(Pipeline.Workspace)/datahub/"
                    targetFiles: "*.yaml"
                    tokenPrefix: "$("
                    tokenSuffix: ")"
                    actionOnMissing: "fail"

                # Add DataHub Helm Chart Repository
                - task: HelmDeploy@0
                  inputs:
                    connectionType: "Kubernetes Service Connection"
                    kubernetesServiceConnection: $(K8S_SERVICECONNECTION)
                    namespace: $(K8S_NAMESPACE)
                    command: "repo"
                    arguments: "add datahub https://helm.datahubproject.io/"

                # Upgrade DataHub Helm Chart installation with DFDS Helm Chart Values File
                - task: HelmDeploy@0
                  inputs:
                    connectionType: "Kubernetes Service Connection"
                    kubernetesServiceConnection: $(K8S_SERVICECONNECTION)
                    namespace: $(K8S_NAMESPACE)
                    command: "upgrade"
                    chartType: "Name"
                    chartName: "datahub/datahub"
                    chartVersion: "$(dataHubHelmChartVersion)"
                    releaseName: "dfds-datahub"
                    install: false
                    arguments:
                      "-i -f $(Pipeline.Workspace)/datahub/values.yaml -f
                      $(Pipeline.Workspace)/datahub/dfdsvals.yaml"
                    waitForExecution: false
